name: Build and Release (Android)

on:
  push:
    tags:
      - "v*"

jobs:
  publish-android:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: npm ci

      - name: Build Android APK (Release)
        run: npm run tauri android build --release
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837

      - name: Extract Android signing key from secrets
        if: ${{ secrets.ANDROID_KEYSTORE }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" > src-tauri/gen/android/release.keystore.base64
          base64 -d src-tauri/gen/android/release.keystore.base64 > src-tauri/gen/android/release.keystore

      - name: Sign APK
        if: ${{ secrets.ANDROID_KEYSTORE }}
        run: |
          ${{ env.ANDROID_HOME }}/build-tools/34.0.0/apksigner sign \
            --ks src-tauri/gen/android/release.keystore \
            --ks-key-alias ${{ secrets.ANDROID_KEY_ALIAS }} \
            --ks-pass pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
            --key-pass pass:${{ secrets.ANDROID_KEY_PASSWORD }} \
            --out src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk \
            src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk

      - name: Get app version
        id: app-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Rename APK files
        run: |
          mkdir -p release-apks
          # 使用已签名的 APK（如果存在）
          if [ -f "src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk" ]; then
            cp src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk \
               release-apks/yana-${{ steps.app-version.outputs.version }}-universal-release.apk
            echo "✅ Signed APK ready"
          # 否则使用未签名的 APK
          elif [ -f "src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk" ]; then
            cp src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk \
               release-apks/yana-${{ steps.app-version.outputs.version }}-universal-release-unsigned.apk
            echo "⚠️ Unsigned APK (secrets not configured)"
          fi
          # 列出所有生成的文件
          ls -lh release-apks/

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: 'See the assets to download this version and install.'
          body_path: UPDATE.md
          draft: true
          prerelease: false
          files: |
            release-apks/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
